const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
const User = require('../models/User'); // ƒë∆∞·ªùng d·∫´n t·ªõi userSchema c·ªßa b·∫°n
const router = express.Router();

// ƒêƒÉng k√Ω
router.post('/signup', async (req, res) => {
    try {
      const { password, role, name, email, phone, avatar } = req.body;
  
      const existingUser = await User.findOne({ email });
      if (existingUser) return res.status(400).json({ message: 'Email already exists' });
  
      const hashedPassword = await bcrypt.hash(password, 10);
  
      const newUser = new User({
        password: hashedPassword,
        role,
        name,
        email,
        phone,
        avatar  // base64 string
      });

      await newUser.save();
      res.status(201).json({ message: 'User registered successfully!' });
    } catch (err) {
      res.status(500).json({ message: 'Server error', error: err.message });
    }
});

// ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // T√¨m ng∆∞·ªùi d√πng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({ message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' });
    }

    // So s√°nh m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c' });
    }

    // T·∫°o JWT
    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET || 'admin123',
      { expiresIn: '1d' } // Token h·∫øt h·∫°n sau 1 ng√†y
    );

    // Th√†nh c√¥ng ‚Äì tr·∫£ th√¥ng tin ng∆∞·ªùi d√πng (ho·∫∑c token sau n√†y)
    res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng ' + token,
      token,  // üëà tr·∫£ token
      user: {
        id: user._id,
        name: user.name,
        role: user.role,
        avatar: user.avatar,
        email: user.email,
        phone: user.phone,
        status: user.status
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
});

// G·ª≠i m√£ OTP v·ªÅ email
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;

  try {
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i' });
    }

    // T·∫°o m√£ OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v√† th·ªùi gian t·∫°o (tu·ª≥ c√°ch b·∫°n mu·ªën l∆∞u - t·∫°m th·ªùi response cho ƒë∆°n gi·∫£n)
    user.otpCode = otpCode;
    user.otpExpires = Date.now() + 5 * 60 * 1000; // h·∫øt h·∫°n sau 5 ph√∫t
    await user.save();

    // G·ª≠i email qua Nodemailer
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'nhomcnpm1@gmail.com',
        pass: 'abfk znlx ggfn ycpk',
      },
    });

    const mailOptions = {
      from: 'SOA@gmail.com',
      to: email,
      subject: 'OTP Reset Password',
      text: `M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otpCode}`,
    };

    await transporter.sendMail(mailOptions);

    res.json({ message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n', otp: otpCode});
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
});

// ƒë·ªïi m·∫≠t kh·∫©u
router.post('/reset-password', async (req, res) => {
  const { email, newPassword } = req.body;

  try {
    const user = await User.findOne({ email });

    if (!user) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† xo√° OTP
    user.password = hashedPassword;

    await user.save();

    res.json({ message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
});

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng KH√îNG ph·∫£i admin ho·∫∑c librarian
router.get('/', async (req, res) => {
  try {
    const users = await User.find({
      role: { $nin: ['admin', 'librarian'] }
    }).sort({ timeCreate: -1 });

    res.json(users);
  } catch (err) {
    res.status(500).json({ error: 'L·ªói khi truy v·∫•n ng∆∞·ªùi d√πng.' });
  }
});

// update th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // Check if the provided id is a valid MongoDB ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }

    const updated = await User.findByIdAndUpdate(
      id,
      { $set: req.body },
      { new: true, runValidators: true }
    );

    if (!updated) return res.status(404).json({ error: 'User not found' });

    res.json({
      message: 'User updated successfully',
      user: updated,
    });
  } catch (err) {
    console.error('Error updating user:', err);
    res.status(500).json({ error: 'Update failed' });
  }
});

// l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
const mongoose = require('mongoose');

router.get('/:id', async (req, res) => {
  try {
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }

    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ error: 'User not found' });

    res.json(user);
  } catch (err) {
    res.status(500).json({ error: 'Fetch failed' });
  }
});

// delete user
router.delete('/:id', async (req, res) => {
  try {
    const objectId = new mongoose.Types.ObjectId(req.params.id);

    const deleted = await User.findByIdAndDelete(objectId);
    if (!deleted) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({ message: 'User deleted successfully' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi xo√° user', error: err.message });
  }
});

module.exports = router;
